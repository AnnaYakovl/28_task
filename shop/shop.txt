class Shop
{
	public static function get()
	{
		static $myShop = null;
		if ( $myShop == null )
		{
			$myShop = new Shop();
		}    
		return $myShop;
	}

	private function __construct()
  	{
    		$this->initialize();
		$this->connectWithDataBase();
  	}

	private function initialie();
	private function connectWithDataBase();
}

interface IClothes
{
	public function setColor($color);
	public function setSize($size);
	public function setMaterial($material);
}

interface IItem
{
	public function setItemCount($itemCount);
	public function getItemCount();
	public function setItemId($itemId);
	public function getItemId();
	public function setPrice($price);
	public function getPrice();
}

interface IDiscount
{
	public function applyPercentageDiscount($percentageDiscount);
	public function applyShippingDiscount($shippingDiscount);
	public function applyStockItemPrice($stockPrice);
}

class Clothes implements IItem, IClothes, IDiscount
{
	protected $itemCount = 0;
	protected $itemId;
	protected $itemPrice;

	protected $percentageDiscount;
	protected $shippingDiscount;
	protected $stockItemPrice;

	//implement IClothes interface
	public function setColor($color);
	public function setSize($size);
	public function setMaterial($material);
	
	//implement IItem interface
	public function setItemCount($itemCount);
	public function getItemCount();
	public function setItemId($itemId);
	public function getItemId();
	public function setPrice($price);
	public function getPrice();

	//implement IDiscount interface
	public function applyPercentageDiscount($price);
	public function applyShippingDiscount($price);
	public function applyStockItemPrice();

	public function getPriceWithDiscount()
	{
		$priceWithDiscount = applyPercentageDiscount($this->itemPrice);
		$priceWithDiscount =applyShippingDiscount($priceWithDiscount);
		return $priceWithDiscount;		
	}
}

class Bag
{
	private $userId;
	private $itemsArray = [];

	private function __construct($userId)
  	{
    		$this->userId = $userId;
  	}

	public function AddItem($Clothes)
	{
		if ($Clothes->getCount > 0)
		{
			array_push($this->itemsArray, $Clothes);
		}
	}

	public function checkOut()
	{
		$newOrder = new Order(this->itemsArray, $this->userId);
		return $newOrder;
	}
}

class UserData
{
	private $userAddres;
	private $userPhone;
	private $userEmail;
	private $userPersonalDiscount;

	public setUserAddress($userAddress);
	public getUserAddress();
	public setUserPhone($userPhone);
	public getUserPhone();
	public setUserEmail($userEmail);
	public getUserEmail();
	public setUserPersonalDiscount($userPersonalDiscount);
	public getUserPersonalDiscount();
}

class User
{
	private $userId;
	protected $userData;

	private function __construct()
  	{
    		$this->userData = new UserData();
  	}		
}

class Order
{
	protected $userId;
	private $itemsArray = [];

	private function __construct($itemsArray ,$userId)
  	{
    		$this->userId = $userId;
		$this->itemsArray = $itemsArray;
  	}

	public function calculateTotalSum()
	{
		$sum = 0;
		
		for ($i = 0; $i < count($this->itemsArray); $i++)
		{
			sum += $this->itemsArray[i].getPriceWithDiscount();
		}
		
		return $sum;
	}

	public function getItems(){/*...*/}
	public function getItemCount(){/*...*/}
	public function addItem($item){/*...*/}
	public function deleteItem($item){/*...*/}
}

class OrderRepository
{
	private $source;

	public function setSource(IOrderSource $source)
	{
		$this->source = $source;
	}

	public function load($orderID)
	{
		return $this->source->load($orderID);
	}
	public function save($order){/*...*/}
	public function update($order){/*...*/}
}

interface IOrderSource
{
	public function load($orderID);
	public function save($order);
	public function update($order);
	public function delete($order);
}

class MySQLOrderSource implements IOrderSource
{
	public function load($orderID);
	public function save($order){/*...*/}
	public function update($order){/*...*/}
	public function delete($order){/*...*/}
}

class ApiOrderSource implements IOrderSource
{
	public function load($orderID);
	public function save($order){/*...*/}
	public function update($order){/*...*/}
	public function delete($order){/*...*/}
}

class OrderViewer
{
	public function printOrder($order){/*...*/}
	public function showOrder($order){/*...*/}
}

class Delivery
{
	public function sendOrder($order);
}

